#!/bin/sh
# Shell utility for colorscheme and wallpaper selection with wallust.
# Version 1.1
#
# Copyright (C) 2025 Alessandro Rizzoni
# This software is licensed under the terms of the MIT License.

# Function to print the version information
_chwal_version() {
    printf \
        'Shell utility for colorscheme and wallpaper selection with wallust.\n'
    printf 'Version 1.1\n'
}

# Function to display usage instructions for the script
_chwal_help() {
    cat << EOF
Usage: chwal [OPTIONS]

Options:
  -d, --dir DIR         Specify the wallpaper directory
  -h, --help            Show this help message
  -l, --load            Pre-load themes for images in the wallpaper directory
  -p, --pre PRE_HOOK    Specify a script to run before changing the wallpaper
  -P, --post POST_HOOK  Specify a script to run after changing the wallpaper
  -m, --mark            Mark the current wallpaper
  -V, --version         Show the version of the script
EOF
}

# Function for handling errors and printing an error message
_chwal_error() {
    # The error message to display
    message="$1"
    # The exit code, defaulting to 1 if not specified
    code="${2:-1}"
    # Return the error code
    printf "Error: %s\n" "$message" >&2
    return "$code"
}

# Function to mark the current wallpaper
_chwal_mark_wallpaper() {
    # The wallpaper to mark
    CURRENT_WALLPAPER="$1"
    # Check if a custom file is provided for marking the wallpaper
    if [ -n "$2" ] && [ -s "$2" ]; then
        MKWAL_FILE="$2"
    else
        # Default to the cache directory if no custom file is provided
        CHWAL_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}/chwal"
        # Ensure cache directory exists
        mkdir -p "$CHWAL_CACHE_HOME"
        # Default mark file
        MKWAL_FILE="$CHWAL_CACHE_HOME/marks.txt"
    fi

    # Ensure the current wallpaper is provided before marking
    if [ -n "$CURRENT_WALLPAPER" ]; then
        # Append the wallpaper path to the file
        printf '%s\n' "$CURRENT_WALLPAPER" >> "$MKWAL_FILE"
    else
        # Error if wallpaper is not set
        _chwal_error \
            "current wallpaper could not be determined from $WALLPAPER_PATH" '2'
    fi
}

# Function to pre-cache wallpapers in parallel, using a max job limit
_chwal_load_wallpapers() {
    max_jobs=4
    # Reset the positional parameters to hold the list of PIDs
    set --

    # Find and process wallpaper files
    find "$WALLPAPER_DIR" -type f | while IFS= read -r file; do
        # Run wallust for each wallpaper file in the background
        wallust run --quiet --skip-sequences --skip-templates "$file" &
        # Get the process ID of the background job and append to the pid list
        pid=$!
        set -- "$@" "$pid"

        # Count current jobs and wait for jobs if max_jobs is reached
        job_count=$#
        if [ "$job_count" -ge "$max_jobs" ]; then
            # Wait for the first job to finish then remove from the pid list
            wait "$1"
            shift
        fi
    done

    # Wait for any remaining jobs to finish
    for pid; do
        wait "$pid"
    done
}

# Function to randomly select a wallpaper from the specified directory
_chwal_select_wallpaper() {
    # Create a temporary file
    tmpfile=$(mktemp "${TMPDIR:-/tmp}/chwal.XXXXXXXXXX")

    # Ensure cleanup happens when the script exits
    trap 'rm -f "$tmpfile"' 0 1 2 15

    count=0
    selected=""
    # Set the wallpaper directory
    WALLPAPER_DIR="$1"

    # Default to /usr/share/backgrounds if no directory is specified
    if [ -z "$WALLPAPER_DIR" ]; then
        WALLPAPER_DIR="/usr/share/backgrounds"
    fi

    # List all files in the wallpaper directory and store them in the temp file
    find "$WALLPAPER_DIR" -type f > "$tmpfile"

    # Read the list of wallpapers and randomly select one
    while IFS= read -r line; do
        count=$((count + 1))

        # Generate a random number based on current time to select a wallpaper
        now=$(date +%s)
        rand=$((now % count))

        # Select the wallpaper if the random number mod count is 0
        if [ $((rand % count)) -eq 0 ]; then
            selected="$line"
        fi
    done < "$tmpfile"

    # If no wallpaper was selected, display an error
    if [ -z "$selected" ]; then
        _chwal_error "no files found in directory: $WALLPAPER_DIR" '2'
    fi

    # Return the selected wallpaper
    printf '%s\n' "$selected"
}

# Function to change the wallpaper, with pre/post hooks if specified
_chwal_change_wallpaper() {
    # The wallpaper directory
    WALLPAPER_DIR="$1"
    # The currently set wallpaper
    OLD_WALLPAPER="$2"
    # Select a new wallpaper
    NEW_WALLPAPER=$(_chwal_select_wallpaper "$WALLPAPER_DIR")

    # Run the pre-hook script if specified
    if [ -n "$PRE_HOOK" ]; then
        if ! _chwal_run_hook "$PRE_HOOK" "$NEW_WALLPAPER" "$OLD_WALLPAPER"; then
            # Error if pre-hook fails
            _chwal_error "failed to run pre hook: $PRE_HOOK" '1'
        fi
    fi

    # Apply the new wallpaper
    if _chwal_apply_wallpaper "$NEW_WALLPAPER"; then
        # Cache the new wallpaper
        _chwal_cache_wallpaper "$NEW_WALLPAPER"
    else
        # Error if wallpaper application fails
        _chwal_error "failed to apply wallpaper: $NEW_WALLPAPER" '1'
    fi

    # Run the post-hook script if specified
    if [ -n "$POST_HOOK" ]; then
        if ! _chwal_run_hook "$POST_HOOK" "$NEW_WALLPAPER" "$OLD_WALLPAPER"; then
            # Error if post-hook fails
            _chwal_error "failed to run post hook: $POST_HOOK" '1'
        fi
    fi
}

# Function to apply a wallpaper using wallust
_chwal_apply_wallpaper() {
    # Try to apply the wallpaper
    wallust run --quiet "$1" && return 0 || return 1
}

# Function to cache the currently set wallpaper
_chwal_cache_wallpaper() {
    # The wallpaper path to cache
    WALLPAPER_PATH="$1"

    # Check if a custom cache file is provided
    if [ -n "$2" ]; then
        # Save to the provided file
        printf '%s' "$WALLPAPER_PATH" > "$2"
    else
        # Use the default cache location if no custom file is provided
        CHWAL_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}/chwal"
        # Ensure the cache directory exists
        mkdir -p "$CHWAL_CACHE_HOME"
        # Save to the cache
        printf '%s' "$2" > "$CHWAL_CACHE_HOME/cache"
    fi
}

# Function to run the pre/post hook scripts if specified
_chwal_run_hook() {
    if [ -n "$1" ] && [ -x "$1" ]; then
        # Execute the hook script with the given arguments
        "$1" "$2" "$3"
    else
        # Error if hook script is invalid
        _chwal_error "Error: Hook script not found or not executable: $1" '2'
    fi
}

# Function to check if the required commands are installed
_chwal_check_requirements() {
    # Check if wallust is installed
    if ! command -v wallust > /dev/null 2>&1; then
        # Error if wallust is not found
        _chwal_error "required program not found: wallust" '127'
    fi
}

# Function to parse command-line arguments
_chwal_parse_args() {
    # Initialize flags
    VERSION=0
    HELP=0
    PRELOAD=0
    MARK=0
    WALLPAPER_DIR=""
    PRE_HOOK=""
    POST_HOOK=""

    # Parse the arguments
    while [ $# -gt 0 ]; do
        case "$1" in
            -h | --help)
                HELP=1
                shift
                ;;
            -l | --load)
                PRELOAD=1
                shift
                ;;
            -m | --mark)
                MARK=1
                shift
                ;;
            -V | --version)
                VERSION=1
                shift
                ;;
            -d | --dir | --directory)
                if [ -z "$2" ]; then
                    _chwal_error "missing argument for: $1" '2'
                fi
                WALLPAPER_DIR="$2"
                shift 2
                ;;
            -p | --pre | --pre-hook)
                if [ -z "$2" ]; then
                    _chwal_error "missing argument for: $1" '2'
                fi
                PRE_HOOK="$2"
                shift 2
                ;;
            -P | --post | --post-hook)
                if [ -z "$2" ]; then
                    _chwal_error "missing argument for: $1" '2'
                fi
                POST_HOOK="$2"
                shift 2
                ;;
            *)
                _chwal_error "invalid option: $1" '2'
                HELP=1
                return 2
                ;;
        esac
    done

    # Return parsed values
    printf '%i %i %i %i %s %s %s' "$VERSION" "$HELP" "$PRELOAD" "$MARK" \
        "$WALLPAPER_DIR" "$PRE_HOOK" "$POST_HOOK"
}

# Function to dispatch the various actions based on parsed arguments
_chwal_dispatch() {
    # Save and split using IFS
    old_ifs=$IFS
    IFS=' '
    # shellcheck disable=SC2086
    set -- $1
    IFS=$old_ifs

    # Assign by position
    VERSION=$1
    HELP=$2
    PRELOAD=$3
    MARK=$4
    WALLPAPER_DIR=$5
    PRE_HOOK=$6
    POST_HOOK=$7

    # Ensure WALLPAPER_DIR is not empty
    if [ -z "$WALLPAPER_DIR" ]; then
        WALLPAPER_DIR="/usr/share/backgrounds"
    fi

    # Show version if requested
    if [ "$VERSION" -eq 1 ]; then
        _chwal_version
    fi

    # Show help if requested
    if [ "$HELP" -eq 1 ]; then
        _chwal_help
    fi

    # Run mark mode
    if [ "$MARK" -eq 1 ]; then
        _chwal_mark_wallpaper "$WALLPAPER_PATH" "$MKWAL_FILE"
    fi

    # Run preload mode
    if [ "$PRELOAD" -eq 1 ]; then
        _chwal_load_wallpapers "$WALLPAPER_DIR"
    fi

    # If none of the flags are set (all flags are '0'), perform the default behavior
    if [ "$VERSION" -ne 1 ] && [ "$HELP" -ne 1 ] && [ "$MARK" -ne 1 ] && [ "$PRELOAD" -ne 1 ]; then
        CHWAL_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}/chwal"
        _chwal_change_wallpaper "$WALLPAPER_DIR" "$CHWAL_CACHE_HOME/cache"
    fi
}

# Main function that orchestrates the script execution
_chwal_main() {
    # Check for required dependencies
    _chwal_check_requirements || exit 1

    # Parse arguments and get values for later use
    result=$(_chwal_parse_args "$@")
    set -- "$result"

    # Dispatch the appropriate action based on parsed arguments
    _chwal_dispatch "$@"
}

# Start the script by calling the main function
_chwal_main "$@"
